important variables:
w: width of the plate
l: length of the plate
n: current node
MAT: the main, big matrix
C: the smaller, constant matrix
T: the matrix for current temperatures
Q: Boundary condition array, each value corresponds to the flux through an
	edge ie [q_top, q_right, q_bottom, q_left] where if the edge is constant
	T then the corresponding value is 0 in the array
Relevant constants for equations

functions:

check_location:
	checks the location of the node
	inputs: w, l, n
	output: interior, top, bottom, left, right, top_left, top_right, bottom_left, bottom_right
interior_step:
	appends rows to the matrices for interior nodes
	inputs: relevant constants for equation, MAT, C, T, n
	output: updated matrices

edge_step_top:
	appends rows to the matrices for the edge nodes for top edge, 
	inputs: relevant constants for equation, MAT, C, T, q_top, n
	output: updates matrices

%the following are the same idea for different edges
edge_step_right:
edge_step_bottom:
edge_step_left:

check_location(){
	%use lori's code
}

interior_step(){
	%determine neighboring nodes
	%create row for matrices using equation and neighboring nodes
	%append new row to old matrices using command: [old_matrix; new_row]
}

edge_step_top(){
	%determine neighboring nodes
	%if q_top == 0, create row for matrices using equation and neighboring nodes
	%else, create row for matrices using equation and neighboring nodes
	%append new row to old matrices using command: [old_matrix; new_row]

}

main(){

	%define all important variables

	for (time steps){
		for(number of nodes){

			location = check_location(node)

			if (location == interior){
				interior_step(node)
			}

			else if (location == top){
				edge_step_top(node)
			}
			% ... else statements for other edges

			else if (location == top_left){
				%do something, had to go to grandparents house
			}
		}
		Temperatures = inv(MAT)*C;

		% rearrange temperature matrix and graph
	}
}
